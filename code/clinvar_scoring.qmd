---
title: "Clinvar Scoring"
author: "Jonathan Speh"
format: 
  html:
    code-fold: true
    code-tools: true
    df-print: kable
engine: knitr
bibliography: references.bib
---

## Dependencies

```{r}
#| message: false

library(data.table)
library(dplyr)
library(ggplot2)
library(ggridges)
library(knitr)
source("code/helpers.R")
```

## Description

-   Retrieve CADD scores and used annotations for all Clinvar SNVs that are annotated as pathogenic
-   ClinVar Data were retrived on 21.11.2023, version is 12.11.2023

# Prepare and score Data

## Prepare Data

-   already done by Martin

```{bash}
#| eval: false
# download data
wget https://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/clinvar_20231112.vcf.gz -P data/

#filter pathogenic SNVs from Clinvar data and remove duplicates
zcat data/clinvar_20231112.vcf.gz | grep  ";CLNSIG=Pathogenic;" | awk 'BEGIN{ FS="\t"; OFS="\t" }{ if ((length($4) == 1) && (length($5) == 1)) print $1,$2,".",$4,$5 }' | sort -k1,1 -k2,2n | uniq | gzip -c > data/clinvar_20231112.pathogenic_SNVs.vcf.gz
```

```{r}
n_input <- read.table("data/clinvar_20231112.pathogenic_SNVs.vcf.gz") |> nrow()
```

A total of `r n_input` variants were uploaded by CADD.

## Scoring

-   Upload to CADD
    -   Used GRCh38, v1.6, include annotations
    -   Read 67438 lines, saved 67320 variants
-   Reasons for Missmatch
    -   100 mtDNA variants -- Not supported by CADD
    -   18 Variants with error in ref or alt. allele

```{bash}
#| message: false
#| eval: false

# Download CADD results
# TODO Download Martins CADD scoring and compare with mine
wget https://cadd.kircherlab.bihealth.org/static/finished/GRCh38-v1.6_anno_07f30736e553caf29fd517ca559d7f8c.tsv.gz -O data/clinvar_pathogenic_scored.tsv.gz
gunzip data/clinvar_pathogenic_scored.tsv.gz
```

## Check and select scored data

```{r}
#| message: false
#| tbl-cap: CADD results for Clinvar Pathogenic Variants
keep <- c("Chrom" = "#Chrom", "Pos", "Ref", "Alt", "Type", "Length",
         "AnnoType", "Consequence", "ConsScore", "ConsDetail", 
         "GeneID", "GeneName", "FeatureID", "Intron", "Exon", "cDNApos", 
         "relcDNApos", "protPos", "relProtPos", "RawScore", "PHRED")

clinvar_scored <- fread("data/clinvar_pathogenic_scored.tsv", 
                        header = TRUE, sep = "\t", skip = 1) |> 
                  select(all_of(keep)) |> 
                  filter(!Chrom %in% c("X", "Y")) |>  
                  mutate("ChromPos" = paste(Chrom, Pos, sep=":"), # identifier for each position
                         "Ident" = paste(ChromPos, Ref, Alt, sep = ":")) # identifier for each variant

# Get number of hits and unique variants
n_hits <- nrow(clinvar_scored)
n_unique_variants <- length(unique(clinvar_scored$Ident)) 

# Filter coding Variants
coding <- clinvar_scored |> filter(AnnoType == "CodingTranscript")
n_coding <- nrow(coding)
n_unique_coding <- length(unique(coding$Ident))

head(clinvar_scored)
```

CADD scoring returned `r n_hits` results for `r n_unique_variants` unique Variants.

# Duplicated Annotations

## Looking at the duplicates

```{r}
#| tbl-cap: Positions with the most annotated Variants
#| fig-cap: Distribution of the number of Annotation for individual Variants


# Get possible Annnotations and Consequences
# TODO: Check if needed in final doc
all_annots <- factor(unique(clinvar_scored$AnnoType), 
                     levels = c("CodingTranscript", "NonCodingTranscript", 
                                "Transcript", "RegulatoryFeature", "Intergenic"))
all_consequences <- unique(clinvar_scored$Consequence)

# Find positions with multiple annotations
# TODO Think if I need to do something with them
multiple_annots <- clinvar_scored |> group_by(Ident) |> count() |> arrange(desc(n)) 
head(multiple_annots)


summary(multiple_annots)

multiple_annots |> 
  ggplot(aes(x=n))+
  geom_bar() +
  scale_y_log10()

```

## Remove duplicates

-   Individual variants have \> 1 annotations
-   CADD only returns the highest score for each Variant and no information on where it came from
-   Workaround:
-   Use [ConsScore](https://github.com/kircherlab/CADD-scripts/blob/master/src/scripts/lib/Annotations.py#L175)
-   Use relative cDNA positionRemaining Duplicates (e.g. variant annotated in two genes) to prioritize variants earlier in coding sequence

```{r}
#| tbl-cap: "Overview of remaining duplicates using ConScore and rel. cDNA position"
#| tbl-subcap:
#|  -  "Number of remaining duplicates for each consequence" 
#|  -  "Duplicates in coding regions"
#|  -  "Genes with duplications that were not resolved" 

# TODO: Why so many duplicates in cannonical splice sites?  - look at them
clinvar_scored_unique <- remove_duplicates(clinvar_scored)

remaining_dups <- clinvar_scored_unique |> group_by(Ident) |> add_count() |>
  filter(n > 1) |> ungroup()

remaining_dups |> 
  group_by(Ident) |>
  slice_head(n = 1) |> 
  group_by(Consequence) |>
  count() |> arrange(desc(n)) 
  
remaining_dups |>
  filter(AnnoType == "CodingTranscript") |>
  select(Chrom, Pos, Ref, Alt, Consequence, GeneName, FeatureID, Exon, cDNApos, 
         relcDNApos, protPos, relProtPos)


remaining_dups |> 
  filter(AnnoType == "CodingTranscript") |> select(GeneName) |> 
  unique()

rm(clinvar_scored_unique_prot)
rm(remaining_dups)
```

```{r}
# Resolve remaining duplicates randomly
# TODO: resolve duplicates in coding region manually?
# TODO: add slice_sample to `remove_duplicates()`
clinvar_scored_unique <- clinvar_scored_unique |> group_by(Ident) |> 
  slice_sample(n = 1)

```

Check if `clinvar_scored_unique` only returns unique Ids: `r nrow(clinvar_scored_unique) == length(unique(clinvar_scored_unique$Ident))`

Check if `clinvar_scored_unique` has same amount of entries as previously determined number of unique variants: `r n_unique_variants == nrow(clinvar_scored_unique)`

Check if all Variants are SNVs: `r mean(clinvar_scored_unique$Type == "SNV") == 1`



# Descriptives for the Phred Score of different annotation/ Consequences

-   **TODO** Continue here, analysis should now be less meaningless...

```{r}
#| message: false
#| tbl-cap: "Description of the PHRED scores"
#| tbl-subcap: 
#|   - "For all Consequences"
#|   - "Consequences with less than 10 variants"
#| layout-ncol: 1


clinvar_scored_unique_summary <- clinvar_scored_unique |>  
  group_by(AnnoType, Consequence) |> 
  summarise(n = n(),
            meanPhred = mean(PHRED),
            sdPhred = sd(PHRED),
            medianPhred = median(PHRED), 
            minPhred = min(PHRED),
            maxPhred = max(PHRED)) |>
  arrange(AnnoType, desc(n))

clinvar_scored_unique_summary

clinvar_scored_unique_summary |> filter(n<10)  
rm(clinvar_scored_unique_summary)
```

```{r}
#| fig-cap: 
#|   -  " Distribution of the Phred Scores"
#|   -  "Distribution of Phred Scores for different Annotation Types"
#|   -  "Distribution of Phred Scores for different consequences"


clinvar_scored_unique |>
  ggplot(aes(x = PHRED)) + 
  geom_density(colour = "blue") 

# Distribution of Phred Scores for different Annotations
# TODO: add descriptive stats (at least n)
# TODO: sort ridgelines bei mean / median PHRED
clinvar_scored_unique |>
  ggplot(aes(x = PHRED)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~AnnoType, scales= "free_y")

  
# Ridgeline Plot of distributions for all Consequences, wrapped by Annotations 
# So far my favourite 
clinvar_scored_unique |> 
  ggplot(aes(x = PHRED, y = Consequence)) +
  geom_density_ridges() +
  #stat_density_ridges(quantile_lines = TRUE, quantiles = 4) +
  theme_ridges() + 
  facet_wrap(~AnnoType, scales = "free_y", ncol = 2) +
  theme(legend.position = "none")
```

## Pathogenic variants with low PHRED

-   Some known pathogenic Variants (marked in ClinVar as Pathogenic) have fairly low cadd scores

    -   A fixed Threshold (e.g. 15 used in [@reid2023]) will miss candidates

    ```{r}
    clinvar_scored_unique |> filter(PHRED <= 15) |> nrow()
    clinvar_scored_unique |> filter(PHRED <= 10) |> nrow()
    clinvar_scored_unique |> filter(PHRED <= 1) |> nrow()

    ```

```{r}
#| message: false
clinvar_scored_unique |> group_by(Ref, Alt) |> summarise(n = n(), mean_phred = mean(PHRED)) |> arrange(desc(n))


clinvar_scored_unique |> filter(AnnoType == "CodingTranscript") |> group_by(Ref, Alt) |> summarise(n = n(), mean_phred = mean(PHRED)) |> arrange(desc(n))




clinvar_scored_unique |> filter(Consequence == "STOP_GAINED") |> group_by(Ref, Alt) |> summarise(n = n(), mean_phred = mean(PHRED)) |> arrange(desc(n))


```
